import java.nio.file.Files

plugins {
    id "java"
    id "maven-publish"
}

group "meteordevelopment"
version "0.2.2"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "org.openjdk.jmh:jmh-core:1.36"
    testImplementation "org.openjdk.jmh:jmh-generator-annprocess:1.36"

    testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.36"
}

compileJava {
    options.encoding = "UTF-8"

    // Note: This will fail if the JVM is above Java 8 (Fork RetroLambda to fix)
    doLast {
        var retrolambaJar = new URL("https://oss.sonatype.org/content/groups/public/net/orfjackal/retrolambda/retrolambda/2.5.7/retrolambda-2.5.7.jar")
        var retrolambdaFile = new File("${rootProject.buildDir}/retrolambda/retrolambda.jar")
        if (!retrolambdaFile.exists()) {
            retrolambdaFile.getParentFile().mkdirs()
            try (InputStream is = retrolambaJar.openStream()) {
                Files.copy(is, retrolambdaFile.toPath())
            }
        }
        var classpath = project.sourceSets.main.runtimeClasspath
        var classpathString = classpath.files.collect { it.absolutePath }.join(File.pathSeparator)
        var javahome = System.getProperty("java.home")
        var javaexe = javahome + File.separator + "bin" + File.separator + "java"
        if (System.getProperty("os.name").toLowerCase().contains("win") && !System.getProperty("os.name").toLowerCase().contains("darwin")) {
            javaexe += ".exe"
        }
        var processBuilder = new ProcessBuilder(
                javaexe,
                "-Dretrolambda.inputDir=${compileJava.destinationDir.toString().replace("\\", "\\\\").replace(" ", "\\ ")}",
                "-Dretrolambda.classpath=${classpathString.replace("\\", "\\\\").replace(" ", "\\ ")}",
                "-Dretrolambda.defaultMethods=true",
                "-Dretrolambda.bytecodeVersion=51",
                "-javaagent:${retrolambdaFile.absolutePath.toString().replace("\\", "\\\\").replace(" ", "\\ ")}",
                "-jar",
                retrolambdaFile.absolutePath.toString().replace("\\", "\\\\").replace(" ", "\\ "),
        )
        var outputLog = new File("${rootProject.buildDir}/retrolambda/${project.path.replace(":", "_")}output.log")
        processBuilder.redirectOutput(outputLog)
        processBuilder.redirectError(outputLog)
        var process = processBuilder.start()
        process.waitFor()
        if (process.exitValue() != 0) {
            throw new GradleException("RetroLambda failed with exit code " + process.exitValue())
        }
    }
}

compileTestJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

publishing {
    publications {
        java(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "meteor-maven"
            url = "https://maven.meteordev.org/releases"

            credentials {
                username = System.getenv("MAVEN_METEOR_ALIAS")
                password = System.getenv("MAVEN_METEOR_TOKEN")
            }

            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
